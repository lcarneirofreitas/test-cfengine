###################################################

## body para umask default linux 022
body contain umask_default {
        umask => "022";
}

## body copy secure cp and purge 
body copy_from secure_and_purge_cp(from,server)
{
source      => "$(from)";
servers     => { "$(server)" };
compare     => "digest";
encrypt     => "true";
verify      => "true";
purge       => "true";
}

## body para acertar permissoes
body perms change_owner(mode,user,group) {

                        owners => { "$(user)" };
                        groups => { "$(group)" };
                        mode => "$(mode)";
}

## bundle para criar diretorios e acertar permissoes
bundle agent create_directories(directories,mod,user,group) {

        files:  

                "$(directories)/."
                        pathtype => "literal",
                        perms => change_owner("$(mod)","$(user)","$(group)"),
                        create => "true";
}

## bundle para criar arquivos e acertar permissoes
bundle agent create_files(file,mod,user,group) {

        files:  

                "$(file)"
                        pathtype => "literal",
                        perms => change_owner("$(mod)","$(user)","$(group)"),
                        create => "true";
}

## bundle para deletar arquivos
bundle agent delete_file(files) {

        files:
                "$(files)"
                        delete => tidy;
}

## bundle para instalar/remover/update de pacotes
bundle agent control_package(method,pkg,policy) {

        classes:
                redhat::
                        "$(policy)" expression => isvariable(policy);

                redhat.add::
                        "has_package" expression => returnszero("/bin/rpm -q ${pkg} --quiet", "noshell");

		debian::
			"$(method)" expression => isvariable(method);

        packages:
                debian.apt::
                "$(pkg)"
                        package_policy => "$(policy)",
                        package_method => apt,
                        package_select => ">=";

                debian.pip::
                "$(pkg)"
                        package_policy => "$(policy)",
                        package_method => pip(""),
                        package_select => ">=";

                debian.npm::
                "$(pkg)"
                        package_policy => "$(policy)",
                        package_method => npm_g,
                        package_select => ">=";

                redhat.!add::
                "$(pkg)"
                        package_policy => "$(policy)",
                        package_method => yum;

                redhat.add.!has_package::
                "$(pkg)"
                        package_policy => "$(policy)",
                        package_method => yum;
}

##  bundle para criacao de usuarios do sistema
bundle agent create_system_account(user) {

        classes:
                "exist" expression => returnszero("/bin/grep -w $(user) /etc/passwd > /dev/null","useshell");

        commands:
                !exist::
                        "/usr/sbin/adduser --system --no-create-home $(user)"
                        comment => "Adding system account";

}

### bundles para criacao de usuarios
#bundle agent create_user(user) {
#
#       users:
#               "$(user)"
#               policy => "present",
#               home_dir => "/home/$(user)",
#               #group_primary => "$(user)",
#               #groups_secondary => "$(user)";
#               home_bundle => setup_home_dir("$(user)");
#}
#
#bundle agent setup_home_dir(user) {
#
#       #vars:
#       #       "keys" slist => { "id_rsa", "id_rsa.pub" };
#       files:
#              "/home/$(user)/." create => "true";
#              "/home/$(user)/.ssh/." create => "true";
#       #       "/home/$(user)/.ssh/$(keys)" copy_from => local_cp("/tmp/$(keys)");
#}

## bundle para criar usuario administrador no servidor
bundle agent create_user(user,home,shell,password,gecos,method) {

        classes:
                "user_exist" expression => userexists("$(user)");
                "$(method)" expression => isvariable(method);

        commands:
                linux.!user_exist.add::
                        "/usr/sbin/useradd -m -d '$(home)' -s '$(shell)' -p '$(password)' -c '$(gecos)' $(user)";
                linux.user_exist.del::
                        "/usr/sbin/userdel -f -r $(user)";
}

## bundle para criar link simbolico
bundle agent create_sym_link(from,to) {

        files:
                "$(to)"
                        link_from => ln_s("$(from)"),
                        move_obstructions => "true",
                        action => "immediate";
}

## bundle para alterar permissoes
bundle agent change_permission(directorie_or_file,mod,user,group) {

        files:
                "$(directorie_or_file)"
                        perms => change_owner("$(mod)","$(user)","$(group)");
                        #create => "true";
}

## bundle para copiar arquivos e acertar permissoes
bundle agent copy_from_master(to,from,mod,user,group) {

       files:
                "$(to)"
                        perms => change_owner("$(mod)","$(user)","$(group)"),
                        copy_from => secure_cp("$(sys.workdir)/masterfiles/$(from)", "192.168.33.45"),
                        repository => "$(sys.workdir)/repository",
                        changes => detect_content,
                        action => "immediate";
}

## bundle para copiar arquivos default dos servidores e acertar permissoes
bundle agent copy_from_master_default(to,from,mod,user,group) {

        files:
                "$(to)"
                        perms => change_owner("$(mod)","$(user)","$(group)"),
                        copy_from => secure_cp("$(sys.workdir)/masterfiles/masterfiles_default/$(from)","192.168.33.45"),
                        repository => "$(sys.workdir)/repository",
                        changes => detect_content,
                        action => "immediate";
}

# bundle para copiar arquivos default e restartar o servico
bundle agent copy_from_master_default_and_restart_service(to,from,mod,user,group,service) {

        files:  
                "$(to)" 
                        perms => change_owner("$(mod)","$(user)","$(group)"),
                        copy_from => secure_cp("$(sys.workdir)/masterfiles/masterfiles_default/$(from)","192.168.33.45"),
                        repository => "$(sys.workdir)/repository",
                        classes => if_repaired("$(service)_restart"),
                        changes => detect_content,
                        action => "immediate";
}


## bundle para copiar diretorios e arquivos recursivamente
bundle agent copy_recursive(to,from,mod,user,group) {

        files:
                "$(to)"
                        perms => change_owner("$(mod)","$(user)","$(group)"),
                        copy_from => secure_and_purge_cp("$(sys.workdir)/masterfiles/$(from)","192.168.33.45"),
                        repository => "$(sys.workdir)/repository",
                        depth_search => recurse("inf"),
                        changes => detect_content,
                        action => "immediate";
}

## bundle para expandir templates, acertar permissoes e restartar o servico
bundle agent copy_from_template_and_restart_service(to,fromtemplate,mod,user,group,service) {

        files:
                "$(to)"
                        perms => change_owner("$(mod)","$(user)","$(group)"),
                        create => "true",
                        action => "immediate",
                        edit_line => expand_template("$(sys.workdir)/masterfiles/templates/$(fromtemplate)"),
                        classes => if_repaired("$(service)_restart"),
                        changes => detect_content,
                        edit_defaults => empty;
}

## bundle para criar grupo no servidor
bundle agent create_group(user) {

        classes:
                "group_exist" expression => groupexists("$(user)");

        commands:
                linux.!group_exist::
                        "/usr/sbin/groupadd $(user)";
}

## bundle para adicionar usuario ao grupo
bundle agent add_user_to_group(user,group) {

        classes:
                "user_exist" expression => userexists("$(user)");
                "group_exist" expression => groupexists("$(group)");
                "user_in_group" expression => returnszero("/usr/bin/id -nG $(user) | /bin/grep -w $(group) > /dev/null","useshell");

        commands:
                linux.user_exist.group_exist.!user_in_group::
                        "/usr/sbin/usermod -G $(group) $(user)";
}

## bundle para configuracao do timezone do servidor
bundle agent configura_timezone {

        methods:

                "Copying /etc/timezone"
                usebundle => copy_from_master_default_and_restart_service("/etc/timezone","/etc/timezone","0644","root","root","timezone");

                "Symbolic Link /etc/localtime"
                usebundle => create_sym_link("/usr/share/zoneinfo/America/Sao_Paulo","/etc/localtime");

        commands:

                timezone_restart::
                "/usr/bin/env DEBIAN_FRONTEND=noninteractive";
                #"/bin/chmod 644 $(timezone_file)";
                "/usr/sbin/dpkg-reconfigure -f Noninteractive tzdata";
}

## bundle para executar comandos caso a condicao seja falsa
bundle agent run_cmd_if_not_success(cond,command) {

       classes:
                "exitcondition" expression => returnszero("$(cond) >/dev/null 2>&1","useshell");

       commands:
                !exitcondition::
                          "$(command)"
                          contain => in_shell_and_silent,
                          contain => umask_default;
}

